= jaxb2ruby

Generate Ruby objects from an XML schema using {JAXB}[https://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding] and JRuby

<b>DO NOT USE, WORK IN PROGRESS</b>

=== Usage

  > jaxb2ruby --help
  usage: jaxb2ruby [options] schema
      -c, --classes=MAP1[,MAP2,...]    Java to Ruby class mappings
                                       MAP can be a string in the form javaclas=rubyclass or a YAML file of java/ruby class pairs
      -h, --help                       Show this message
      -n, --namespace=MAP1[,MAP2,...]  XML namespace to class mappings
                                       MAP can be a string in the form namespace=class or a YAML file of namespace/class pairs
      -o, --output=DIRECTORY           Directory to output the generated ruby classes, defaults to ruby
      -t, --template=NAME              Template used to generate the ruby classes
                                       Can be a path to an ERB template or one of: roxml (default), happymapper, ruby
=== Java/Ruby Class Mapping

You can specify your own mapping(s) via the <code>-c</code> option.
Otherwise, +jaxb2ruby+ will turn Java packages/classes into Ruby modules/class using the following conventions:

* +.+ is replaced with <code>::</code>
* +_+ is replaced with +V+.
* Java inner classes become Ruby inner classes

Some examples:

<code>com.example.User</code> becomes <code>Com::Example::User</code>

<code>com.example.API._V15.User</code> becomes <code>Com::Example::API::V15::User</code>

<code>com.example.User$Addresses$Address</code> results in the creation of 3 classes: <code>User</code>, <code>User::Addresses</code> 
and <code>User::Addresses::Address</code>, all within the <code>Com::Exampe</code> namespace.

Native types are mapped using the following:

boolean :: :boolean
java.lang.Boolean :: :boolean
java.lang.String :: String
java.lang.Integer :: Integer
java.math.BigDecimal :: Integer
java.math.BigInteger :: Integer
javax.xml.datatype.Duration :: String
javax.xml.datatype.XMLGregorianCalendar :: DateTime

=== Namespace/Class Mapping

You can specify your own mapping(s) via the <code>-n</code> option.

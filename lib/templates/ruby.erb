<%- accessor = lambda { |node| node.accessor.tr("?", "") }; order = lambda { |nodes| nodes.sort_by { |n| n.name } } %>
<%- @class.requires.each do |mod| -%>
require "<%= mod %>"
<%- end -%>

<%= @class.module.map { |mod| "module #{mod}" }.join " " %>

<%= @class.outter_class.map { |klass| "class #{klass}" }.join "; " %>

class <%= @class.basename %> <%= "< #{@class.superclass}" if @class.superclass %>
  <%- if @class.element.children.any? %>
      # Elements
    <%- order[@class.element.children].each do |attr| -%>
      attr_accessor :<%= accessor[attr] %>
    <%- end -%>
  <% end %>

  <%- if @class.element.attributes.any? %>
      # Attributes
    <%- order[@class.element.attributes].each do |attr| -%>
      attr_accessor :<%= accessor[attr] %>
    <%- end -%>
  <%- end -%>

  <%- nodes = order[@class.element.children + @class.element.attributes] %>
  def initialize(attributes = nil)
    attributes ||= {}
    <% nodes.each do |node| %>
      <%- if node.respond_to?(:array?) && node.array? -%>
        @<%= accessor[node] %> = Array(attributes[:<%= accessor[node] %>]).dup unless attributes[:<%= accessor[node] %>].nil?  <%# should these always ret an array? %>
      <%- else -%>
        @<%= accessor[node] %> = attributes[:<%= accessor[node] %>]
      <%- end -%>
    <%- end -%>
  end

  def inspect
    sprintf "#<%%s:0x%x <%= nodes.map { |node| "@#{accessor[node]}=%s" }.join(", ") %>>", self.class.name, object_id, <%= nodes.map { |node| "@#{accessor[node]}.inspect" }.join(", ") %>
  end
end

<%= @class.outter_class.map { "end" }.join " " %>

<%= @class.module.map { "end" }.join " " %>
